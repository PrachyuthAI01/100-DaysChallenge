//GFG

//{ Driver Code Starts


#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends


class Solution {
public:
	unordered_map<int, vector<int>> adj;
    int total = 0;
    int solve(int node, int prev) {
        int ans = 0;
        for(auto i : adj[node]) {
            if(i != prev) {
                int res = solve(i, node); 
                if(res%2 == 0) {
                    total++;
                }
                else {
                    ans += res;
                }
            }
        }
        return ans + 1;
    }
	int minimumEdgeRemove(int n, vector<vector<int>>edges){
	    for(auto i : edges) {
	        int u = i[0];
	        int v = i[1];
	        adj[u].push_back(v);
	        adj[v].push_back(u);
	    }
	    solve(1,-1);
	    return total;

	}
};

//{ Driver Code Starts.
int main(){
	int tc;
	cin >> tc;
	while(tc--){
		int n;
		cin >> n;
		vector<vector<int>>edges;
		for(int i = 0; i < n-1; i++){
			int x, y;
			cin >> x >> y;
			edges.push_back({x,y});
		}
		Solution obj;
		int ans = obj.minimumEdgeRemove(n, edges);
		cout << ans <<"\n";
	}
	return 0;
}

// } Driver Code Ends





//Leetcode


class Solution {
public:
    bool evaluateTree(TreeNode* root) {
        if (!root->left && !root->right) return root->val;
        bool l=evaluateTree( root->left);  
        bool r= evaluateTree( root->right);
        return (root->val==3)?l&r:l|r;    
    }
};
