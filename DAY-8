//Leetcode

class Solution {
public:
    long long maximumValueSum(vector<int>& nums, int k, vector<vector<int>>& edges) {
        int n = nums.size();
        vector<int> diff(n);
        long sum = 0;

        for (int i = 0; i < n; ++i) {
            diff[i] = (nums[i] ^ k) - nums[i];
            sum += nums[i];
        }

        std::sort(diff.begin(), diff.end(), greater<int>());

        for (int i = 0; i < n; i += 2) {
            if (i + 1 == n) return sum;
            int pair = diff[i] + diff[i + 1];
            if (pair > 0) sum += pair;
        }

        return sum;
    }
};


//GFG(potd)


class Solution{
    public:
    int findClosest( int n, int k,int arr[]) 
    { 
        // Complete the function
        vector<int>v;
        for(int i=0;i<n;i++){
            v.push_back(arr[i]);
        }
        sort(v.begin(),v.end());
        vector<int>::iterator low1;
        low1 = lower_bound(v.begin(),v.end(),k);
        int x = v[low1-v.begin()];
        int y = v[low1-v.begin()-1];
        if(abs(x-k)==abs(y-k)){
            if(x>y)return x;
            return y;
        }
        if(abs(x-k)>abs(y-k))return y;
        return x;
    } 
};
